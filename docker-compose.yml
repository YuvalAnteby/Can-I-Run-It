services:
  # Pytest unit testing
  test:
    build:
      context: .
      dockerfile: backend/Dockerfile_test
    environment:
      - MONGODB_URI=mongodb://mongodb:27017

  # FastAPI backend
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile_app
    container_name: ciri-app
    ports:
      - "8000:8000"
    depends_on:
      mongodb:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/health" ]
      start_period: 10s
      interval: 30s
      timeout: 10s
      retries: 3
    env_file:
      - .env
    networks:
      - ciri-net
  # React - development environment
  react_dev:
    build:
      context: frontend
      dockerfile: Dockerfile_dev
    container_name: ciri-react-dev
    depends_on:
      - backend
      - mongodb
    ports:
      - "3000:3000"
    networks:
      - ciri-net
    environment:
      - CHOKIDAR_USEPOLLING=true
    env_file:
      - .env
    volumes:
      - ./frontend:/app
      - /app/node_modules
    profiles: [ "dev" ]
  # React - production environment
  react_prod:
    build:
      context: frontend
      dockerfile: Dockerfile_prod
    container_name: ciri-react-prod
    depends_on:
      - backend
      - mongodb
    ports:
      - "3000:3000"
    networks:
      - ciri-net
    profiles: [ "prod" ]
  # MongoDB
  mongodb:
    image: mongo:7.0.15
    healthcheck:
      test: ["CMD-SHELL", "mongosh --quiet --eval \"db.adminCommand('ping')\""]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 3
    container_name: ciri-mongo
    ports:
      - "27017:27017"
    networks:
      - ciri-net
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    restart: unless-stopped

volumes:
  mongo_data:
  mongo_config:

networks:
  ciri-net:
